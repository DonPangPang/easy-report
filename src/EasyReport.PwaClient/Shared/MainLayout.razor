@inherits LayoutComponentBase
@inject Request Request
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject MasaBlazor MasaBlazor

<CascadingValue Value="this">
    <MApp>
        <MNavigationDrawer Class="deep-purple accent-4" @bind-MiniVariant="mini" HideOverlay Dark Permanent App>
            <ChildContent>
                <MListItem Class="px-2">
                    @if (user?.Avatar is null)
                    {
                        <MListItemAvatar Size="40" Color="purple">
                            <span class="white--text text-h5">胖</span>
                        </MListItemAvatar>
                    }
                    else
                    {
                        <MListItemAvatar Size="40">
                            <MImage Src="@("https://randomuser.me/api/portraits/men/85.jpg")"></MImage>
                        </MListItemAvatar>
                    }

                    <MListItemTitle>@Username</MListItemTitle>

                    <MButton Icon OnClick="ChangeMiniSize">
                        <MIcon>mdi-chevron-left</MIcon>
                    </MButton>
                </MListItem>
                <MList>
                    <MDivider Dark></MDivider>

                    <MTooltip Right>
                        <ActivatorContent>
                            <MListItem Link Dark OnClick="() => NavigationManager.NavigateTo(Consts.RouteMap.Home)" @attributes="@context.Attrs">
                                <MListItemIcon>
                                    <MIcon Dark>mdi mdi-view-dashboard</MIcon>
                                </MListItemIcon>

                                <MListItemContent>
                                    <MListItemTitle>工作台</MListItemTitle>
                                </MListItemContent>
                            </MListItem>
                        </ActivatorContent>
                        <ChildContent>
                            <span>工作台</span>
                        </ChildContent>
                    </MTooltip>

                    <MDivider Light></MDivider>
                    <MTooltip Right>
                        <ActivatorContent>
                            <MListItem Link Dark OnClick="() => NavigationManager.NavigateTo(Consts.RouteMap.TodoDay)" @attributes="@context.Attrs">
                                <MListItemIcon>
                                    <MIcon Dark>mdi mdi-weather-sunny</MIcon>
                                </MListItemIcon>

                                <MListItemContent>
                                    <MListItemTitle>我的一天</MListItemTitle>
                                </MListItemContent>
                            </MListItem>

                        </ActivatorContent>
                        <ChildContent>
                            <span>我的一天</span>
                        </ChildContent>
                    </MTooltip>
                    <MTooltip Right>
                        <ActivatorContent>
                            <MListItem Link Dark OnClick="() => NavigationManager.NavigateTo(Consts.RouteMap.TodoWeek)" @attributes="@context.Attrs">
                                <MListItemIcon>
                                    <MIcon Dark>mdi mdi-lightbulb-on-10</MIcon>
                                </MListItemIcon>

                                <MListItemContent>
                                    <MListItemTitle>满满一周</MListItemTitle>
                                </MListItemContent>
                            </MListItem>

                        </ActivatorContent>
                        <ChildContent>
                            <span>满满一周</span>
                        </ChildContent>
                    </MTooltip>
                    <MTooltip Right>
                        <ActivatorContent>
                            <MListItem Link Dark OnClick="() => NavigationManager.NavigateTo(Consts.RouteMap.TodoMonth)" @attributes="@context.Attrs">
                                <MListItemIcon>
                                    <MIcon Dark>mdi mdi-calendar-range</MIcon>
                                </MListItemIcon>

                                <MListItemContent>
                                    <MListItemTitle>熬完了一个月</MListItemTitle>
                                </MListItemContent>
                            </MListItem>

                        </ActivatorContent>
                        <ChildContent>
                            <span>熬完了一个月</span>
                        </ChildContent>
                    </MTooltip>

                    <MDivider Dark></MDivider>
                    @foreach (var item in groups)
                    {
                        <MTooltip Right>
                            <ActivatorContent>
                                <MListItem Link Dark @attributes="@context.Attrs">
                                    <MIcon Dark>mdi mdi-group</MIcon>
                                    <MListItemIcon>

                                    </MListItemIcon>

                                    <MListItemContent>
                                        <MListItemTitle>@item.Name</MListItemTitle>
                                    </MListItemContent>
                                </MListItem>

                            </ActivatorContent>
                            <ChildContent>
                                <span>@(item.Description ?? item.Name)</span>
                            </ChildContent>
                        </MTooltip>
                    }

                </MList>
            </ChildContent>

            <AppendContent>
                <MTooltip Right>
                    <ActivatorContent>
                        <MListItem Link Dark OnClick="() => NavigationManager.NavigateTo(Consts.RouteMap.Config)" @attributes="@context.Attrs">
                            <MListItemIcon>
                                <MIcon Dark>mdi mdi-cog</MIcon>
                            </MListItemIcon>

                            <MListItemContent>
                                <MListItemTitle>系统设置</MListItemTitle>
                            </MListItemContent>
                        </MListItem>
                    </ActivatorContent>
                    <ChildContent>
                        <span>系统设置</span>
                    </ChildContent>
                </MTooltip>
                <MTooltip Right>
                    <ActivatorContent>
                        <MListItem Link Dark OnClick="HandleExistAsync" @attributes="@context.Attrs">
                            <MListItemIcon>
                                <MIcon Dark>mdi mdi-exit-to-app</MIcon>
                            </MListItemIcon>

                            <MListItemContent>
                                <MListItemTitle>退出</MListItemTitle>
                            </MListItemContent>
                        </MListItem>
                    </ActivatorContent>
                    <ChildContent>
                        <span>退出</span>
                    </ChildContent>
                </MTooltip>

            </AppendContent>
        </MNavigationDrawer>
        <MMain>
            <MContainer Fluid Class="er-container">
                @Body
            </MContainer>
        </MMain>
    </MApp>
</CascadingValue>

<style>
    .er-container{
        height: 100vh;
        overflow-y: auto;
    }
</style>

@code
{
    List<TodoGroup> groups = new();
    bool mini = true;

    void ChangeMiniSize()
    {
        mini = !mini;
    }

    User? user = new() { Name = "Guest" };

    string Username => user?.Name ?? "Guest";

    public async Task FetchDataAsync()
    {
        user = await Request.GetAsync<User>("/api/Account/current");
        await LocalStorage.SetItemAsStringAsync("user", user?.ToJson());

        var res = await Request.GetAsync<PagedList<TodoGroup>>("/api/TodoGroup"
            , new TodoGroupQueryParameter
            {
                OrderBy = $"{nameof(TodoGroup.Order)}"
            });
        groups = res ?? new List<TodoGroup>();

        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await FetchDataAsync();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    async Task HandleExistAsync()
    {
        await LocalStorage.RemoveItemAsync("user");
        NavigationManager.NavigateTo(Consts.RouteMap.Login);
        await Request.GetAsync<string>("/api/Account/Logout");
    }

    [JSInvokable]
    public void SwitchTheme()
    {
        MasaBlazor.ToggleTheme();
    }

    public void Fresh()
    {
        StateHasChanged();
    }
}