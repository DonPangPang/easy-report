@page "/config"
@using Microsoft.AspNetCore.Components.Forms
@inject Request Request
@layout MainLayout
@inject MasaBlazor MasaBlazor
@inject IJSRuntime JsRuntime
@inject EventService EventService

<PageTitle>系统配置</PageTitle>
<div class="er-panel">
    <MRow>
        <MCol Sm="8">
            <MCard Class="rounded-xl" Height="220">
                <MCardTitle>
                    <MIcon Large Left>
                        mdi mdi-account
                    </MIcon>
                    <span class="text-h6 font-weight-light">个人信息</span>
                </MCardTitle>
                <MCardText>
                    <MRow>
                        <MCol>
                            <MAvatar Size="128" Color="purple">
                                <MIcon Size="64">
                                    mdi mdi-account
                                </MIcon>
                            </MAvatar>
                        </MCol>
                    </MRow>
                </MCardText>
            </MCard>
        </MCol>
        <MCol Sm="4">
            <MCard Class="rounded-xl" Height="220">
                <MCardTitle>
                    <MIcon Large Left>
                        mdi mdi-cog
                    </MIcon>
                    <span class="text-h6 font-weight-light">设置</span>
                </MCardTitle>
                <MCardText>
                    <MDescriptions Column="1">
                        <MDescriptionsItem Label="主题" Span="1">
                            <MSwitch Value="_isDark" TValue="bool"
                                OnClick="ClickSwitchTheme" LeftText="亮"
                                RightText="暗" Color="black"
                                TrackColor="#E5E6EB" />
                        </MDescriptionsItem>
                    </MDescriptions>
                </MCardText>
            </MCard>
        </MCol>
    </MRow>
    <MRow>
        <MCol Sm="6">
            <MCard Class="rounded-xl">
                <MCardTitle>
                    <MIcon Large Left>
                        mdi mdi-group
                    </MIcon>
                    <span class="text-h6 font-weight-light">分组</span>
                    <MSpacer></MSpacer>
                    <MButton Color="purple" Dark
                        OnClick="OnHandleGroupDialogOpen">添加分组</MButton>
                    <MDialog @bind-Value="_groupDialogVisible" MaxWidth="400"
                        ContentClass="rounded-xl"
                        OnOutsideClick="OnHandleGroupDialogClose">
                        <MCard Rounded="true">
                            <MCardTitle>添加分组</MCardTitle>
                            <MCardText>
                                <MTextField Label="名称"
                                    @bind-Value="@_group.Name" />
                                <MTextField Label="描述"
                                    @bind-Value="@_group.Description" />
                                <MTextField Label="排序码"
                                    @bind-Value="@_group.Order" />
                            </MCardText>
                            <MCardActions>
                                <MSpacer></MSpacer>
                                <MButton Color="primary" Text
                                    OnClick="OnHandleSaveGroup">确定</MButton>
                                <MButton Text
                                    OnClick="OnHandleGroupDialogClose">取消
                                </MButton>
                            </MCardActions>
                        </MCard>
                    </MDialog>
                </MCardTitle>
                <MCardText>
                    <MDataTable Headers="groupHeaders" Items="_groups"
                        ItemsPerPage="5">
                        <ItemColContent>
                            @if (context.Header.Value == "actions")
                            {
                                <MIcon Small Class="mr-2"
                                    OnClick="()=>OnHandleEditGroup(context.Item)">
                                    mdi-pencil</MIcon>
                                <MIcon Small
                                    OnClick="()=>OnHandleDeleteGroup(context.Item)">
                                    mdi-delete</MIcon>
                            }
                            else if (context.Header.Value ==
                            nameof(TodoGroup.Description))
                            {
                                <span
                                    class="d-inline-block text-truncate">@context.Item.Description</span>
                            }
                            else
                            {
                                @context.Value
                            }
                        </ItemColContent>
                    </MDataTable>
                </MCardText>
            </MCard>
        </MCol>
        <MCol Sm="6">
            <MCard Class="rounded-xl">
                <MCardTitle>
                    <MIcon Large Left>
                        mdi mdi-tag
                    </MIcon>
                    <span class="text-h6 font-weight-light">标签</span>
                    <MSpacer></MSpacer>
                    <MButton Color="purple" Dark
                        OnClick="()=>_tagDialogVisible = true">添加标签</MButton>
                    <MDialog @bind-Value="_tagDialogVisible" MaxWidth="400"
                        ContentClass="rounded-xl"
                        OnOutsideClick="OnHandleTagDialogClose">
                        <MCard>
                            <MCardTitle>添加标签</MCardTitle>
                            <MCardText>
                                <MTextField Label="名称"
                                    @bind-Value="@_tag.Name" />
                                <MTextField Label="描述"
                                    @bind-Value="@_tag.Description" />
                                <div style="display: flex;gap:10px;">
                                    <ColorPicker Label="背景色"
                                        @bind-value="@_tag.Color">
                                    </ColorPicker>
                                    <ColorPicker Label="文本颜色"
                                        @bind-value="@_tag.TextColor">
                                    </ColorPicker>
                                </div>
                            </MCardText>
                            <MCardActions>
                                <MSpacer></MSpacer>
                                <MButton Color="primary" Text
                                    OnClick="OnHandleSaveTag">确定</MButton>
                                <MButton Text
                                    OnClick="OnHandleTagDialogClose">取消
                                </MButton>
                            </MCardActions>
                        </MCard>
                    </MDialog>
                </MCardTitle>
                <MCardText>
                    <MDataTable Headers="tagHeaders" Items="_tags"
                        ItemsPerPage="5">
                        <ItemColContent>
                            @if (@context.Header.Value == nameof(TodoTag.Name))
                            {
                                <MChip Label Small Color="@context.Item.Color"
                                    TextColor="@context.Item.TextColor">
                                    @context.Item.Name
                                </MChip>
                            }
                            else if (context.Header.Value == "actions")
                            {
                                <MIcon Small Class="mr-2"
                                    OnClick="()=>OnHandleEditTag(context.Item)">
                                    mdi-pencil</MIcon>
                                <MIcon Small
                                    OnClick="()=>OnHandleDeleteTag(context.Item)">
                                    mdi-delete</MIcon>
                            }
                            else if (context.Header.Value ==
                            nameof(TodoTag.Description))
                            {
                                <span
                                    class="d-inline-block text-truncate">@context.Item.Description</span>
                            }
                            else if (context.Header.Value ==
                            nameof(TodoTag.Color))
                            {
                                <ColorPicker Value="@context.Item.Color" ReadOnly>
                                </ColorPicker>
                            }
                            else if (context.Header.Value ==
                            nameof(TodoTag.TextColor))
                            {
                                <ColorPicker Value="@context.Item.TextColor"
                                    ReadOnly>
                                </ColorPicker>
                            }
                            else
                            {
                                @context.Value
                            }
                        </ItemColContent>
                    </MDataTable>
                </MCardText>
            </MCard>
        </MCol>
    </MRow>
</div>

<style>
    .er-panel {
        margin: 1rem;
    }
</style>
@code {

    protected override async Task OnInitializedAsync()
    {
        _isDark = MasaBlazor?.Theme?.Dark ?? false;

        _groups = await Request.GetAsync<PagedList<TodoGroup>>("api/TodoGroup", new
        TodoGroupQueryParameter()
            { OrderBy = $"{nameof(TodoGroup.Order)}" }) ?? new
        List<TodoGroup>();

        _tags = await Request.GetAsync<PagedList<TodoTag>>("api/TodoTag", new
        TodoTagQueryParameter()
            { OrderBy = $"{nameof(TodoTag.Name)}" }) ?? new
        List<TodoTag>();

        StateHasChanged();


        await base.OnInitializedAsync();
    }

    #region Group
    private List<IBrowserFile> _files = new();

    List<TodoGroup> _groups = new();

    List<DataTableHeader<TodoGroup>> groupHeaders = new(){
new () { Text = "名称", Value = "Name" },
new () { Text = "描述", Value = "Description" },
new () { Text = "排序码", Value = "Order" },
new () { Text = "操作", Value = "actions" }
};

    TodoGroup _group = new() { Name = "未命名分组" };
    bool _groupDialogVisible = false;

    int _editedIndex = -1;

    [CascadingParameter]
    private MainNav MainNav { get; set; } = null!;

    async Task OnHandleSaveGroup()
    {
        if (_editedIndex > -1)
        {
            var entity = await Request.PutAsync<TodoGroup>("api/TodoGroup", _group);
            _groups[_editedIndex] = entity ?? _groups[_editedIndex];
            _groupDialogVisible = true;
        }
        else
        {
            var entity = await Request.PostAsync<TodoGroup>("api/TodoGroup", _group);
            _groups.Add(entity ?? _group);
        }


        OnHandleGroupDialogClose();

        await EventService.NotifyGroupsChangeAsync();
    }

    void OnHandleEditGroup(TodoGroup group)
    {
        _editedIndex = _groups.IndexOf(group);
        _group = group;
        OnHandleGroupDialogOpen();
    }

    async Task OnHandleDeleteGroup(TodoGroup group)
    {
        await Request.DeleteAsync<string>($"api/TodoGroup/{group.Id}");

        _groups.Remove(group);
        await EventService.NotifyGroupsChangeAsync();
    }

    void OnHandleGroupDialogOpen()
    {
        _groupDialogVisible = true;
    }

    void OnHandleGroupDialogClose()
    {
        _group = new TodoGroup() { Name = "未命名分组" };
        _editedIndex = -1;
        _groupDialogVisible = false;

        @* StateHasChanged(); *@
    }
    #endregion Group

    #region Tag
    @* private List<IBrowserFile> _files = new(); *@

    List<TodoTag> _tags = new();

    List<DataTableHeader<TodoTag>> tagHeaders = new(){
new () { Text = "名称", Value = "Name" },
new () { Text = "描述", Value = "Description" },
new () { Text = "背景色", Value = nameof(TodoTag.Color) },
new () { Text = "文本颜色", Value = nameof(TodoTag.TextColor) },
new () { Text = "操作", Value = "actions" }
};

    TodoTag _tag = new() { Name = "未命名标签" };
    bool _tagDialogVisible = false;

    async Task OnHandleSaveTag()
    {
        if (_editedIndex > -1)
        {
            var result = await Request.PutAsync<TodoTag>("api/TodoTag", _tag);
            _tagDialogVisible = true;
            _tags[_editedIndex] = result ?? _tags[_editedIndex];
        }
        else
        {
            var result = await Request.PostAsync<TodoTag>("api/TodoTag", _tag);
            _tags.Add(result ?? _tag);
        }


        OnHandleTagDialogClose();
    }

    void OnHandleEditTag(TodoTag tag)
    {
        _editedIndex = _tags.IndexOf(tag);
        _tag = tag;
        OnHandleTagDialogOpen();
    }

    async Task OnHandleDeleteTag(TodoTag tag)
    {
        await Request.DeleteAsync<string>($"api/TodoTag/{tag.Id}");
        _tags.Remove(tag);
    }

    void OnHandleTagDialogOpen()
    {
        _tagDialogVisible = true;
    }

    void OnHandleTagDialogClose()
    {
        _tag = new TodoTag() { Name = "未命名分组" };
        _editedIndex = -1;
        _tagDialogVisible = false;
    }
    #endregion Tag

    #region config

    [CascadingParameter]
    private MainLayout MainLayout { get; set; } = null!;
    bool _isDark;

    private async Task ClickSwitchTheme(MouseEventArgs args)
    {
        _isDark = !_isDark;
        await JsRuntime.InvokeVoidAsync("switchTheme",
        DotNetObjectReference.Create(MainLayout), 0, 0);
    }

    #endregion config
}